import bcrypt from 'bcryptjs';
import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const prisma = new PrismaClient();

/**
 * Seed do banco de dados
 * Cria o usu√°rio inicial conforme especificado no teste
 */
async function seed(): Promise<void> {
  try {
    console.log('üå± Iniciando seed do banco de dados...');

    // Verificar se o usu√°rio j√° existe
    const existingUser = await prisma.user.findUnique({
      where: { email: 'cliente@incuca.com.br' }
    });

    if (existingUser) {
      console.log('üë§ Usu√°rio inicial j√° existe');
      return;
    }

    // Hash da senha conforme especificado no .env
    const initPassword = process.env.INITIAL_USER_PASSWORD;
    const initEmail = process.env.INITIAL_USER_EMAIL;
    
    if (!initPassword || !initEmail) {
      throw new Error('INITIAL_USER_EMAIL e INITIAL_USER_PASSWORD devem estar definidos no .env');
    }

    const hashedPassword = await bcrypt.hash(initPassword, 12);

    // Criar usu√°rio inicial
    const user = await prisma.user.create({
      data: {
        email: initEmail,
        name: 'Cliente Incuca',
        password: hashedPassword,
        active: true
      }
    });

    console.log('‚úÖ Usu√°rio inicial criado com sucesso:', {
      id: user.id,
      email: user.email,
      name: user.name,
      active: user.active
    });

    // Limpar cache de piadas (se existir)
    const deletedJokes = await prisma.jokeCache.deleteMany({});
    console.log(`üóëÔ∏è Removidas ${deletedJokes.count} piadas do cache`);

    // Criar algumas piadas iniciais para cache (opcional)
    const initialJokes = [
      'Por que os programadores preferem Linux? Porque √© a √∫nica OS que n√£o tem Windows!',
      'Como voc√™ chama um bug que n√£o consegue ser reproduzido? Um feature!',
      'Por que os desenvolvedores JavaScript nunca conseguem sair de casa? Porque eles sempre esquecem de fechar as {}!',
      'Qual √© o tipo de dados favorito dos programadores? Boolean, porque ele s√≥ aceita verdade ou mentira!'
    ];

    for (const joke of initialJokes) {
      // Seed temporariamente desabilitado durante migra√ß√£o do schema
      console.log(`üìù Skipping joke seed: ${joke.substring(0, 50)}...`);
    }

    console.log(`üí´ Adicionadas ${initialJokes.length} piadas iniciais ao cache`);

  } catch (error) {
    console.error('‚ùå Erro durante o seed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Fun√ß√£o para limpar o banco (√∫til para testes)
 */
async function cleanDatabase(): Promise<void> {
  try {
    console.log('üßπ Limpando banco de dados...');
    
    await prisma.jokeCache.deleteMany({});
    await prisma.user.deleteMany({});
    
    console.log('‚úÖ Banco limpo com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao limpar banco:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar seed se este arquivo for executado diretamente
if (require.main === module) {
  const command = process.argv[2];
  
  if (command === 'clean') {
    cleanDatabase()
      .then(() => console.log('‚úÖ Limpeza conclu√≠da'))
      .catch(error => {
        console.error('‚ùå Falha na limpeza:', error);
        process.exit(1);
      });
  } else {
    seed()
      .then(() => console.log('‚úÖ Seed conclu√≠do'))
      .catch(error => {
        console.error('‚ùå Falha no seed:', error);
        process.exit(1);
      });
  }
}

export { seed, cleanDatabase };
